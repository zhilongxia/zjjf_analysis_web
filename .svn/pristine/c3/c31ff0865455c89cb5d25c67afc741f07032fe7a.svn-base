package com.zjjf.analysis.controller.authority;

import java.util.Arrays;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zjjf.analysis.controller.BaseController;
import com.zjjf.analysis.services.authority.AuthorityRoleServcie;
import com.zjjf.analysis.services.authority.AuthorityUserServcie;

import net.sf.json.JSONObject;

@Controller
@RequestMapping({ "/api/authority/user" })
public class AuthorityUserController extends BaseController {

	private final Integer limit = 5;
	
	private static Logger logger = LoggerFactory.getLogger(AuthorityUserController.class);
	
	@Autowired
	private AuthorityUserServcie authorityUserServcie;
	
	@Autowired
	private AuthorityRoleServcie authorityRoleServcie;
	
	@RequestMapping(value = "/loadPage.do")
	public String loaded(HttpServletRequest request) {

		return "analysis/auth/user";
	}

	/**
	 * 用户授权
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getUserList.do")
	@ResponseBody
	public HashMap<String, Object> getUserList(HttpServletRequest request) {


		String currentPage = request.getParameter("currentPage") == null ? "1" : request.getParameter("currentPage");
		String itemsPerPage = request.getParameter("itemsPerPage") == null ? "5" : request.getParameter("itemsPerPage");

		HashMap<String, Object> paramMap = getQueryMap(request, Arrays.asList("userName", "createTimeBegin", "createTimeEnd", "roleId"));
		paramMap.put("pageNo", (Integer.valueOf(currentPage) - 1) * limit);
		paramMap.put("offset", Integer.valueOf(itemsPerPage));
		logger.info("交易订单传入参数 paramMap:" + paramMap);
		
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("userList", authorityUserServcie.getUserList(paramMap));
		resultMap.put("roleList", authorityRoleServcie.getRoleList());
		return resultMap;
	}

	@RequestMapping(value = "/user_edit.do")
	public String user_edit(HttpServletRequest request, Model model) {

		Integer id = Integer.valueOf(request.getParameter("id"));
		model.addAttribute("id", id);
		return "analysis/auth/user_edit";
	}
	
	@RequestMapping(value = "/getEditUserView.do")
	@ResponseBody
	public HashMap<String, Object> getEditUserView(HttpServletRequest request) {


		Integer id = Integer.valueOf(request.getParameter("id"));
		HashMap<String, Object> userInfoMap = authorityUserServcie.getUserInfo(id);
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("userInfo", userInfoMap);
		resultMap.put("roleList", authorityRoleServcie.getRoleList());
		resultMap.put("dataMap", authorityUserServcie.getDataList(Integer.valueOf("" + userInfoMap.get("roleId"))));
		return resultMap;
	}
	
	/**
	 * 用户授权
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/grantUser.do")
	@ResponseBody
	public HashMap<String, Object> grantUser(HttpServletRequest request, @RequestBody JSONObject jsonObj) {

		//String userId = (String) SecurityUtils.getSubject().getSession().getAttribute(SessionConfig.userId);
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		//authorityServcie.grantUser(jsonObj, userId);
		return resultMap;
	}

}

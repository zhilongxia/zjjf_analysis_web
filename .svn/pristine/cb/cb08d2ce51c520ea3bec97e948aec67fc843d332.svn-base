package com.zjjf.analysis.controller.sporder;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.SecurityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zjjf.analysis.beans.login.AuthInfo;
import com.zjjf.analysis.common.constants.SessionConfig;
import com.zjjf.analysis.controller.BaseController;
import com.zjjf.analysis.services.orders.SupportOrdersService;

@Controller
@RequestMapping(value = "/api/sp_order")
public class SpOrderController extends BaseController {

	@Autowired
	private SupportOrdersService supportOrdersService;

	private static Logger logger = LoggerFactory.getLogger(SpOrderController.class);

	@RequestMapping(value = "/loadPage.do")
	public String orderLoaded(@RequestParam(value = "menuId", required = false, defaultValue = "0") Integer menuId, Model model) {

		model.addAttribute("menuId", menuId);
		return "analysis/sporder/sp_order";
	}

	/**
	 * 获取交易订单数据
	 * 
	 * @param request
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/spOrderList.do")
	@ResponseBody
	public HashMap<String, Object> querySpOrders(
			@RequestParam(value = "menuId", required = false, defaultValue = "3") Integer menuId,
			@RequestBody HashMap<String, Object> paramMap) throws IOException {

		AuthInfo authInfo = (AuthInfo) SecurityUtils.getSubject().getSession().getAttribute(SessionConfig.userAuthMap);
		
		if(authInfo.getLevel() == 2){
			paramMap.put("areaIdList", supportOrdersService.getAuthorityLevel(authInfo.getBaseRoleId(), authInfo.getBaseRoleUserId(), authInfo.getLevel()));
		}else if(authInfo.getLevel() == 1){
			paramMap.put("cityIdList", supportOrdersService.getAuthorityLevel(authInfo.getBaseRoleId(), authInfo.getBaseRoleUserId(), authInfo.getLevel()));
		}
		logger.info("交易订单传入参数 paramMap:" + paramMap);
		Object[][] authorityArray = supportOrdersService.getAuthorityFilter(authInfo.getUserId(), menuId);
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("optionList", supportOrdersService.getOptionList(authInfo.getBaseRoleId(), authInfo.getBaseRoleUserId(), authInfo.getLevel()));
		resultMap.put("key_cn", supportOrdersService.getOrderTitleCn(authorityArray));
		resultMap.put("level", authInfo.getLevel());
		resultMap.put("dataList", supportOrdersService.getOrderData(paramMap, authorityArray));
		resultMap.put("totalCount", supportOrdersService.getTotalCount(paramMap));
		return resultMap;
	}

	/**
	 * 获取交易订单数据
	 * 
	 * @param request
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/portExcel.do", method = RequestMethod.GET)
	public String portExcel(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "menuId", required = false, defaultValue = "3") Integer menuId) throws IOException {

		OutputStream outputStream = response.getOutputStream();

		AuthInfo authInfo = (AuthInfo) SecurityUtils.getSubject().getSession().getAttribute(SessionConfig.userAuthMap);
		HashMap<String, Object> paramMap = getQueryMap(request, Arrays.asList("cityId", "areaId", "spGroupId", "supportmetho",
				"status", "orderNo", "chirdOrderNo", "storeName", "supplierName", "addTimeBegin", "addTimeEnd"));
		
		if(authInfo.getLevel() == 2){
			paramMap.put("areaIdList", supportOrdersService.getAuthorityLevel(authInfo.getBaseRoleId(), authInfo.getBaseRoleUserId(), authInfo.getLevel()));
		}else if(authInfo.getLevel() == 1){
			paramMap.put("cityIdList", supportOrdersService.getAuthorityLevel(authInfo.getBaseRoleId(), authInfo.getBaseRoleUserId(), authInfo.getLevel()));
		}
		logger.info("交易订单传入参数 paramMap:" + paramMap);

		String sheetName = "交易订单";

		Object[][] authorityArray = supportOrdersService.getAuthorityFilter(authInfo.getUserId(), menuId);
		InputStream inputStream = supportOrdersService.exportOrderList(request, response, sheetName, paramMap, authorityArray);

		// 设置文件类型
		response.setContentType("application/vnd.ms-excel; charset=utf-8");
		response.setHeader("Content-Disposition", "attachment;filename=" + sheetName + ".xls");
		response.setCharacterEncoding("utf-8");

		byte[] buffer = new byte[1024];
		int bytesRead;
		while ((bytesRead = inputStream.read(buffer)) != -1) {
			outputStream.write(buffer, 0, bytesRead);
		}
		outputStream.close();
		return null;
	}
}

package com.zjjf.analysis.controller.authority;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.SecurityUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.dubbo.config.annotation.Reference;
import com.zjjf.analysis.common.constants.SessionConfig;
import com.zjjf.analysis.controller.BaseController;
import com.zjjf.analysis.producer.authority.IAuthorityMenuService;
import com.zjjf.analysis.producer.authority.IRoleService;
import com.zjjf.analysis.producer.authority.IUserService;
import com.zjjf.analysis.producer.base.IRegionService;

@Controller
@RequestMapping({ "/api/authority/role" })
public class AuthorityRoleController extends BaseController {

	@Reference(version = "1.0.0")
	private IRoleService roleService;

	@Reference(version = "1.0.0")
	private IUserService userService;
	
	@Reference(version = "1.0.0")
	private IRegionService regionService;
	
	@Reference(version = "1.0.0")
	private IAuthorityMenuService authorityMenuService;

	@RequestMapping(value = "/loadPage.do")
	public String loaded(HttpServletRequest request) {

		return "analysis/auth/role";
	}

	@RequestMapping(value = "/getRoleList.do")
	public @ResponseBody HashMap<String, Object> getRoleList(HttpServletRequest request) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("roleList", roleService.getAllRoleList());
		return resultMap;
	}

	/********************************************************************************************************************************
	 * ��ɫ�༭redirect
	 * 
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/role_edit.do")
	public String role_edit(@RequestParam(value = "id", required = false, defaultValue = "0") Integer id,
			@RequestParam(value = "edit_type", required = false, defaultValue = "0") Integer edit_type, Model model) {

		model.addAttribute("id", id);
		model.addAttribute("edit_type", edit_type);
		return "analysis/auth/role_edit";
	}

	/**
	 * ��ӽ�ɫ
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/saveRoleInfo.do")
	public @ResponseBody HashMap<String, Object> saveRoleInfo(
			@RequestParam(value = "id", required = false, defaultValue = "0") Integer roleId,
			@RequestParam(value = "roleName", required = true, defaultValue = "") String roleName,
			@RequestParam(value = "selectPageJson", required = true, defaultValue = "") String selectPageJson,
			@RequestParam(value = "selectPageJsonKey", required = true, defaultValue = "") String selectPageJsonKey,
			@RequestParam(value = "level", required = false, defaultValue = "0") Integer level,
			@RequestParam(value = "edit_type", required = false, defaultValue = "0") Integer edit_type) {

		String creater = (String) SecurityUtils.getSubject().getSession().getAttribute(SessionConfig.userId);
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		roleService.saveRoleInfo(roleId, roleName, creater, selectPageJson, selectPageJsonKey, level, edit_type);
		return resultMap;
	}

	/**
	 * ��ɫ�༭����load
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getRoleEditView.do")
	public @ResponseBody HashMap<String, Object> getRoleEditView(
			@RequestParam(value = "id", required = false, defaultValue = "0") Integer roleId) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("roleList", roleService.getAllRoleList());
		resultMap.put("roleInfo", roleService.getRoleByRoleId(roleId));
		resultMap.put("menuTree", authorityMenuService.getAllMenuTree(roleId));
		resultMap.put("selectPageJson", authorityMenuService.getSelectPageJson(roleId));
		resultMap.put("selectAllJson", authorityMenuService.getSelectPageKeyJson(Integer.valueOf(roleId)));
		return resultMap;
	}

	/**
	 * ɾ���ɫ
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/deleteRole.do")
	@ResponseBody
	public HashMap<String, Object> deleteRole(HttpServletRequest request) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String id = request.getParameter("id");
		if (id == null) {
			resultMap.put("code", "1");
			resultMap.put("msg", "参数错误, id为空！");
			return resultMap;
		}
		roleService.deleteRole(Integer.valueOf(id));
		resultMap.put("code", "0");
		return resultMap;
	}

	@RequestMapping(value = "/getByRoleId.do")
	@ResponseBody
	public HashMap<String, Object> getByRoleId(HttpServletRequest request) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String roleId = request.getParameter("roleId");

		if (roleId == null) {
			resultMap.put("code", "1");
			resultMap.put("msg", "参数错误, roleId为空！");
			return resultMap;
		}
		resultMap.put("roleInfo", roleService.getRoleByRoleId(Integer.valueOf(roleId)));
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("regionLevel", 3);
		map.put("pid", 6);
		resultMap.put("dataList", regionService.getRegionList(map));
		return resultMap;
	}

	@RequestMapping(value = "/isExitRole.do")
	@ResponseBody
	public HashMap<String, Object> isExitRole(HttpServletRequest request) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String roleName = request.getParameter("roleName");

		if (roleName == null) {
			resultMap.put("code", "1");
			resultMap.put("msg", "参数错误, roleName为空！");
			return resultMap;
		}
		resultMap.put("code", roleService.isExitRole(roleName));
		return resultMap;
	}
	
	@RequestMapping(value = "/getPageKeyByMenuId.do")
	@ResponseBody
	public HashMap<String, Object> getPageKeyByMenuId(HttpServletRequest request) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String menuTwoId = request.getParameter("menuTwoId");
		String roleId = request.getParameter("roleId");
		if (menuTwoId == null) {
			resultMap.put("code", "1");
			resultMap.put("msg", "参数错误, roleName为空！");
			return resultMap;
		}
		resultMap.put("selectAllJson", authorityMenuService.getSelectPageKeyJson(Integer.valueOf(roleId)));
		resultMap.put("pageKeyJson", authorityMenuService.selectPageKeyJson(Integer.valueOf(roleId), Integer.valueOf(menuTwoId)));
		return resultMap;
	}

}

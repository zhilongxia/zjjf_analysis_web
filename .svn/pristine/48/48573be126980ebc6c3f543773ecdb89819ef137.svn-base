package com.zjjf.analysis.services.authority;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zjjf.analysis.beans.analysis.authority.BaseMenu;
import com.zjjf.analysis.beans.analysis.authority.BaseRole;
import com.zjjf.analysis.beans.analysis.base.BaseAuthMenu;
import com.zjjf.analysis.beans.analysis.base.BaseRoleAuth;
import com.zjjf.analysis.beans.analysis.base.BaseRoleData;
import com.zjjf.analysis.beans.analysis.base.BaseRoleDataTemplate;
import com.zjjf.analysis.mapper.analysis.BaseAuthMenuMapper;
import com.zjjf.analysis.mapper.analysis.BaseMenuMapper;
import com.zjjf.analysis.mapper.analysis.BaseRoleAuthMapper;
import com.zjjf.analysis.mapper.analysis.BaseRoleDataMapper;
import com.zjjf.analysis.mapper.analysis.BaseRoleDataTemplateMapper;
import com.zjjf.analysis.mapper.analysis.BaseRoleMapper;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Service
public class AuthorityRoleServcie {

	private Integer roleAuthId = 1;

	@Autowired
	private BaseRoleMapper baseRoleMapper;

	@Autowired
	private BaseMenuMapper baseMenuMapper;

	@Autowired
	private BaseRoleDataMapper baseRoleDataMapper;

	@Autowired
	BaseRoleDataTemplateMapper baseRoleDataTemplateMapper;

	@Autowired
	private BaseRoleAuthMapper baseRoleAuthMapper;

	@Autowired
	private BaseAuthMenuMapper baseAuthMenuMapper;

	/**
	 * 1.删除base_role 2.删除base_role_auth 3.删除base_role_data
	 * 
	 * @param roleId
	 */
	/* @Transactional(propagation = Propagation.SUPPORTS, readOnly = true) */
	public void deleteRole(Integer roleId) {

		baseRoleMapper.deleteById(roleId);
		baseRoleAuthMapper.deleteByRoleId(roleId);
		baseRoleDataMapper.deleteByRoleId(roleId);
	}

	/* @Transactional(propagation = Propagation.SUPPORTS, readOnly = true) */
	public void saveRoleInfo(String id, String roleName, String creater, String selectionTotal, Integer level) {

		assert (selectionTotal) != null;
		if (id != null && !"0".equals(id)) {
			updateRole(id, roleName, creater, JSONArray.fromObject(selectionTotal), level);
		} else {
			addRole(roleName, creater, JSONArray.fromObject(selectionTotal), level);
		}
	}

	public Integer getTotalCount() {

		return baseRoleMapper.getTotalCount();
	}

	public List<BaseRole> getRoleList() {

		return baseRoleMapper.getAllRole();
	}

	private void updateRole(String _id, String roleName, String creater, JSONArray totalList, Integer level) {

		int id = Integer.valueOf(_id);

		for (Object object : totalList) {
			JSONObject json = (JSONObject) object;
			update_base_role(id, roleName, level);
			List<Integer> menuLeveIdList = new ArrayList<Integer>();
			List<Integer> dataIdList = new ArrayList<Integer>();
			for (Object object2 : json.getJSONArray("selectionPage")) {
				menuLeveIdList.add((Integer) object2);
			}
			for (Object object2 : json.getJSONArray("selection")) {
				dataIdList.add((Integer) object2);
			}
			add_base_auth_menu(menuLeveIdList, dataIdList, id, level);
		}

	}

	private void addRole(String roleName, String creater, JSONArray totalList, Integer level) {

		BaseRole baseRole = new BaseRole();
		add_base_role(baseRole, roleName, creater, level);
		for (Object object : totalList) {
			JSONObject json = (JSONObject) object;
			List<Integer> menuLeveIdList = new ArrayList<Integer>();
			List<Integer> dataIdList = new ArrayList<Integer>();
			for (Object object2 : json.getJSONArray("selectionPage")) {
				menuLeveIdList.add((Integer) object2);
			}
			for (Object object2 : json.getJSONArray("selection")) {
				dataIdList.add((Integer) object2);
			}
			add_base_auth_menu(menuLeveIdList, dataIdList, baseRole.getId(), level);
		}
	}

	public List<BaseRole> getRolesOption() {

		return baseRoleMapper.getAllRole();
	}

	public HashMap<String, Object> getRoleInfo(Integer id) {

		HashMap<String, Object> roleMap = new HashMap<String, Object>();
		BaseRole baseRole = baseRoleMapper.getRoleByRoleId(id);
		if (baseRole != null) {
			roleMap.put("roleName", baseRole.getRoleName());
			roleMap.put("dataLevel", baseRole.getLevel());
		}
		return roleMap;
	}

	public List<HashMap<String, Object>> getAllMenuTree() {

		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("level", 1);
		List<HashMap<String, Object>> menuTree = baseMenuMapper.getAllMenu(paramMap);
		for (HashMap<String, Object> hashMap : menuTree) {
			paramMap.clear();
			Integer menuId = Integer.valueOf("" + hashMap.get("id"));
			paramMap.put("pid", hashMap.get("id"));
			paramMap.put("level", 2);
			List<HashMap<String, Object>> level2Tree = baseMenuMapper.getAllMenu(paramMap);
			hashMap.put("level2Tree", level2Tree);
			hashMap.put("authorityKeys", getAuthorityKeysByMenuId(menuId));
		}
		return menuTree;
	}

	protected void add_base_auth_menu(List<Integer> menuIdList, List<Integer> dataKeyList, Integer roleId, Integer dataLevel) {

		// invalid_menu_by_menuId();
		for (Integer menuId : menuIdList) {
			add_base_role_auth(menuId, roleId);
		}
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("menuIdList", menuIdList);
		List<Integer> pidList = getParentMenuIdByMenuId(paramMap);
		for (Integer pid : pidList) {
			add_base_role_auth(pid, roleId);
			add_base_role_data(dataKeyList, pid, roleId, dataLevel);
		}
	}

	protected void update_base_auth_menu(List<Integer> menuIdList, List<Integer> dataKeyList, Integer roleId, Integer dataLevel) {

		// 根据roleId删除之前的菜单权限
		invalid_menu_by_RoleId(roleId);

		for (Integer menuId : menuIdList) {
			invalid_menuData_by_roleId_menuId(roleId, menuId);
			add_base_role_auth(menuId, roleId);
		}
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("menuIdList", menuIdList);
		List<Integer> pidList = getParentMenuIdByMenuId(paramMap);
		for (Integer pid : pidList) {
			add_base_role_auth(pid, roleId);
			add_base_role_data(dataKeyList, pid, roleId, dataLevel);
		}
	}

	private void invalid_menu_by_RoleId(Integer roleId) {

		baseRoleAuthMapper.deleteByRoleId(roleId);
	}

	private void invalid_menuData_by_roleId_menuId(Integer roleId, Integer menuId) {

		HashMap<String, Object> deleteDataMap = new HashMap<String, Object>();
		deleteDataMap.put("roleId", roleId);
		deleteDataMap.put("menuId", menuId);
		baseRoleDataMapper.deleteByMenuIdAndRoleId(deleteDataMap);
	}

	private List<Integer> getParentMenuIdByMenuId(HashMap<String, Object> paramMap) {

		List<Integer> idList = new ArrayList<Integer>();
		List<BaseMenu> baseMenuList = baseMenuMapper.getParentMenuIdByMenuId(paramMap);
		for (BaseMenu baseMenu : baseMenuList) {
			idList.add(baseMenu.getPid());
		}
		return idList;
	}

	protected void add_base_role_data(List<Integer> dataKeyList, Integer menuId, Integer roleId, Integer dataLevel) {

		invalid_datakey_by_menuIdAndRoleId(menuId, roleId);

		for (Integer datatemplateId : dataKeyList) {
			addBaseRoleData(menuId, roleId, datatemplateId, dataLevel);
		}
	}

	private List<HashMap<String, Object>> getAuthorityKeysByMenuId(Integer menuId) {

		List<HashMap<String, Object>> resultList = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> dataParam = new HashMap<String, Object>();
		dataParam.put("menuId", menuId);
		List<BaseRoleDataTemplate> dataList = baseRoleDataTemplateMapper.getRoleDataTemplate(dataParam);
		for (BaseRoleDataTemplate bean : dataList) {
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("id", bean.getId());
			map.put("code", bean.getAuthkey().trim());
			map.put("name", bean.getName());
			map.put("checked", bean.getIsChecked());
			resultList.add(map);
		}
		return resultList;
	}

	private void add_base_role(BaseRole baseRole, String roleName, String creater, Integer level) {

		baseRole.setRoleNo(roleName);
		baseRole.setRoleName(roleName);
		baseRole.setRoleRemark(roleName);
		baseRole.setCreateTime(new Date());
		baseRole.setCreateUser(creater);
		baseRole.setStatus(1);
		baseRole.setOrdId(99);
		baseRole.setLevel(level);
		baseRole.setIsDelete("1");
		baseRoleMapper.insert(baseRole);
	}

	private void update_base_role(Integer id, String roleName, Integer level) {

		HashMap<String, Object> updateMap = new HashMap<String, Object>();
		updateMap.put("userName", roleName);
		updateMap.put("level", level);
		updateMap.put("id", id);
		baseRoleMapper.updateRole(updateMap);
	}

	private void add_base_role_auth(Integer menuId, Integer roleId) {

		BaseRoleAuth baseRoleAuth = new BaseRoleAuth();
		baseRoleAuth.setMenuAuthId(getAuthMenuId(roleAuthId, Integer.valueOf(menuId)));
		baseRoleAuth.setRoleId(roleId);
		baseRoleAuthMapper.insert(baseRoleAuth);
	}

	private void addBaseRoleData(Integer menuId, Integer roleId, Integer datatemplateId, Integer dataLevel) {

		BaseRoleData baseRoleData = new BaseRoleData();
		baseRoleData.setIsChecked(1);
		baseRoleData.setLevel(dataLevel);
		baseRoleData.setMenuId(menuId);
		baseRoleData.setRoleId(roleId);
		baseRoleData.setDatatemplateId(datatemplateId);
		baseRoleDataMapper.insert(baseRoleData);
	}

	private void invalid_datakey_by_menuIdAndRoleId(Integer menuId, Integer roleId) {

		HashMap<String, Object> updateMap = new HashMap<String, Object>();
		updateMap.put("roleId", roleId);
		updateMap.put("menuId", menuId);
		baseRoleDataMapper.updateAllnoChecked(updateMap);
	}

	private Integer getAuthMenuId(Integer roleAuthId, Integer menuId) {

		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("authId", roleAuthId);
		paramMap.put("menuId", menuId);
		BaseAuthMenu baseAuthMenu = baseAuthMenuMapper.getAuthByMenuIdAndAuthId(paramMap);
		if (baseAuthMenu != null) {
			return baseAuthMenu.getId();
		}
		return 0;
	}

}

package com.zjjf.analysis.services.authority;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.zjjf.analysis.beans.analysis.authority.BaseAuthority;
import com.zjjf.analysis.beans.analysis.authority.BaseRole;
import com.zjjf.analysis.beans.analysis.users.UserInfos;
import com.zjjf.analysis.beans.vo.LoginVo;
import com.zjjf.analysis.beans.vo.ModelMsg;
import com.zjjf.analysis.common.constants.SessionConfig;
import com.zjjf.analysis.mapper.analysis.BaseAuthorityMapper;
import com.zjjf.analysis.mapper.analysis.BaseMenuMapper;
import com.zjjf.analysis.mapper.analysis.BaseRoleMapper;

@Service
public class AuthorityServiceImpl {

	@Autowired
	private BaseMenuMapper baseMenuMapper;

	@Autowired
	private BaseRoleMapper baseRoleMapper;

	@Autowired
	private BaseAuthorityMapper baseAuthorityMapper;

	public ModelMsg dealScMgSuccessLogin(LoginVo loginRo, HttpServletRequest request, Model model) {

		UserInfos userInfo = new UserInfos();
		userInfo.setId("test");
		SecurityUtils.getSubject().getSession().setAttribute(SessionConfig.userId, userInfo.getId());
		SecurityUtils.getSubject().getSession().setAttribute(SessionConfig.user_session_key, userInfo);
		SecurityUtils.getSubject().getSession().setAttribute(SessionConfig.user_type_key, SessionConfig.user_scmg);
		SecurityUtils.getSubject().getSession().setAttribute(SessionConfig.menuTree, getMenuTree("test"));

		int count = 1;
		if (count == 1) {
			return new ModelMsg(true, "登陆成功");
		} else {
			return new ModelMsg(false, "数据异常");
		}
	}

	/**
	 * 获取用户角色
	 * 
	 * @param userId
	 * @return
	 */
	public String getRoleSet(String userId) {

		String roleStr = "";
		// Set<String> roleSet = new HashSet<String>();
		List<BaseRole> roleList = baseRoleMapper.getRoleByUserId(userId);
		if (roleList.size() > 0) {
			for (BaseRole baseRole : roleList) {
				// roleSet.add(baseRole.getRoleNo());
				roleStr = baseRole.getRoleNo() + ",";
			}
			return roleStr.substring(0, roleStr.length() - 1);
		}
		return roleStr;
	}

	/**
	 * 获取用户权限
	 * 
	 * @param userId
	 * @return
	 */
	public String getPermissionsSet(String userId) {

		String permissionStr = "";
		// Set<String> roleSet = new HashSet<String>();
		List<BaseAuthority> roleList = baseAuthorityMapper.getAuthorityByUserId(userId);
		if (roleList.size() > 0) {
			for (BaseAuthority baseAuthority : roleList) {
				// roleSet.add(baseAuthority.getRoleNo() + ":" +
				// baseAuthority.getAuthString());
				permissionStr = permissionStr + baseAuthority.getAuthString() + ",";
			}
			return permissionStr.substring(0, permissionStr.length() - 1);
		}
		return permissionStr;
	}

	
	private List<Integer> getPermissionIdByUserId(String userId) {
		
		List<Integer> idList = new ArrayList<Integer>();
		List<BaseAuthority> roleList =  baseAuthorityMapper.getAuthorityByUserId(userId);
		for (BaseAuthority baseAuthority : roleList) {
			idList.add(baseAuthority.getId());
		}
		return idList;
	}
	
	public List<HashMap<String, Object>> getMenuTree(String userId) {

		List<Integer> permissIdList = getPermissionIdByUserId(userId);
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("level", 1);
		paramMap.put("userId", userId);
		paramMap.put("permissIdList", permissIdList);
		List<HashMap<String, Object>> menuTree = baseMenuMapper.getMenuLevel(paramMap);
		for (HashMap<String, Object> hashMap : menuTree) {
			paramMap.clear();
			paramMap.put("pid", hashMap.get("id"));
			paramMap.put("level", 2);
			paramMap.put("userId", userId);
			paramMap.put("permissIdList",  permissIdList);
			List<HashMap<String, Object>> level2Tree = baseMenuMapper.getMenuLevel(paramMap);
			hashMap.put("level2Tree", level2Tree);
		}
		return menuTree;
	}
}
